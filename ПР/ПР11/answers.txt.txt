1. В чем разница между innerHTML и textContent и когда следует использовать каждый метод?
innerHTML - возвращает/устанавливает HTML-разметку элемента, включая теги. Может выполнять HTML-код, что представляет угрозу XSS.
textContent - возвращает/устанавливает только текстовое содержимое, игнорируя HTML-теги. Более безопасен и быстр.
Когда использовать:
textContent - для работы с простым текстом
innerHTML - когда нужно вставить HTML-разметку
2. Как работает делегирование событий (event delegation) и какие преимущества оно дает при работе с динамическими элементами?
Делегирование событий - техника, при которой обработчик события назначается родительскому элементу, а не каждому дочернему элементу отдельно. События "всплывают" от целевого элемента к родителям.
Преимущества:
Экономия памяти (меньше обработчиков)
Работает с динамически добавляемыми элементами
Упрощает код
3. Какие методы используются для поиска элементов в DOM и в чем разница между getElementById, querySelector и querySelectorAll?
getElementById - находит элемент по ID, возвращает один элемент
querySelector - находит первый элемент по CSS-селектору
querySelectorAll - находит все элементы по CSS-селектору, возвращает NodeList
Разница: querySelector/querySelectorAll более гибкие, поддерживают сложные селекторы.
4. Как предотвратить стандартное поведение элемента при обработке событий и когда это необходимо?
Использовать метод event.preventDefault() в обработчике события:
javascript
element.addEventListener('click', function(event) {  
    event.preventDefault();  
    // Дополнительная логика  
});  
Когда необходимо: при отправке форм, переходах по ссылкам, чтобы обработать действие самостоятельно.
5. В чем разница между classList.add() и className для работы с CSS классами?
className - устанавливает всю строку классов элемента (перезаписывает существующие)
classList.add() - добавляет конкретный класс, не затрагивая остальные
classList предоставляет методы: add(), remove(), toggle(), contains()
6. Как создать новый элемент и добавить его в DOM несколькими способами? Какой способ наиболее эффективен?
Способы:
document.createElement() + appendChild()
innerHTML
insertAdjacentHTML()
Наиболее эффективен: document.createElement() + appendChild(), так как не вызывает перепарсинг всего содержимого.
7. Что такое всплытие событий (event bubbling) и как работает метод stopPropagation()?
Всплытие событий - процесс, при котором событие сначала обрабатывается на целевом элементе, затем на его родителях вверх по DOM-дереву.
stopPropagation() - останавливает всплытие события, предотвращая его обработку на родительских элементах.
8. Как получить данные из формы и в чем разница между методами сбора form data?
Методы:
Через элементы формы: form.elementName.value
FormData API: new FormData(form)
Сбор вручную через querySelector
FormData - современный способ, удобен для отправки на сервер.
9. Какие события используются для обработки ввода данных и в чем разница между input, change и keyup?
input - срабатывает при каждом изменении значения
change - срабатывает при потере фокуса, если значение изменилось
keyup - срабатывает при отпускании клавиши
input - лучший выбор для отслеживания изменений в реальном времени.
10. Как оптимизировать производительность при частых манипуляциях с DOM?
Стратегии оптимизации:
Использовать DocumentFragment для групповых вставок
Минимизировать перерисовки и перекомпоновки
Использовать делегирование событий
Кэшировать ссылки на элементы
Избегать частого чтения layout-свойств в циклах