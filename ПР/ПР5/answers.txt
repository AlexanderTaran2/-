1. Какое основное свойство включает CSS Grid и чем принципиально отличается от Flexbox? - display: grid, Flexbox - одномерный, Grid - двумерный, точное позиционирование в двух направлениях.
2. В чем разница между grid-template-columns и grid-auto-columns? Когда следует использовать каждое? - template-columns для явного определения колонок, auto-columns для автоматически создаваемых колонок вне шаблона.
3. Что делают функции repeat(), minmax() и auto-fit в определении grid-шаблона? Приведите примеры. - repeat(3, 1fr) - 3 колонки, minmax(200px, 1fr) - мин/макс размер, auto-fit - авто-подбор колонок.
4. Как работают именованные grid-области и какие преимущества они дают при создании макетов? - grid-template-areas для наглядной структуры, легкость переопределения, улучшение читаемости кода.
5. Объясните систему нумерации grid-линий и как с помощью grid-column и grid-row размещать элементы. - Линии от 1 до n+1, grid-column: 1/3 от линии 1 до 3, grid-row: 2/span 2 со 2 линии на 2 трека.
6. Что такое grid-gap (или gap) и чем он лучше margins для создания промежутков в сетке? - Равномерные промежутки между элементами, отсутствие двойных margins, простота использования.
7. Как свойства justify-items и align-items влияют на выравнивание grid-элементов? - justify-items по горизонтали, align-items по вертикали, значения: start, end, center, stretch.
8. В чем разница между auto-fill и auto-fit при создании адаптивных сеток? - auto-fill создает все возможные колонки, auto-fit растягивает существующие на всю ширину.
9. Как создать сложные макеты с помощью grid-template-areas и какие правила именования областей существуют? - Имена в кавычках, точка для пустых ячеек, одинаковые имена объединяют области.
10. Какие преимущества дает CSS Grid перед другими методами верстки для создания сложных двумерных макетов? - Полный контроль над двумя измерениями, гибкость изменения макета, встроенная адаптивность, чистый код.