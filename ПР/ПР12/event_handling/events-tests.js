// –¢–µ—Å—Ç—ã –¥–ª—è –æ–±—Ä–∞–±–æ—Ç–∫–∏ —Å–æ–±—ã—Ç–∏–π
function runEventTests() {
    console.log('üöÄ –ó–∞–ø—É—Å–∫ —Ç–µ—Å—Ç–æ–≤ –æ–±—Ä–∞–±–æ—Ç–∫–∏ —Å–æ–±—ã—Ç–∏–π...');
    
    let testsPassed = 0;
    let totalTests = 0;
    
    function test(description, testFunc) {
        totalTests++;
        try {
            const result = testFunc();
            if (result && result.then) {
                // –ê—Å–∏–Ω—Ö—Ä–æ–Ω–Ω—ã–π —Ç–µ—Å—Ç
                return result.then(() => {
                    console.log(`‚úÖ ${description}`);
                    testsPassed++;
                }).catch(error => {
                    console.log(`‚ùå ${description}: ${error.message}`);
                });
            } else {
                // –°–∏–Ω—Ö—Ä–æ–Ω–Ω—ã–π —Ç–µ—Å—Ç
                console.log(`‚úÖ ${description}`);
                testsPassed++;
            }
        } catch (error) {
            console.log(`‚ùå ${description}: ${error.message}`);
        }
    }
    
    // –¢–µ—Å—Ç 1: –ë–∞–∑–æ–≤—ã–µ –æ–±—Ä–∞–±–æ—Ç—á–∏–∫–∏ —Å–æ–±—ã—Ç–∏–π
    test('–ë–∞–∑–æ–≤—ã–µ –æ–±—Ä–∞–±–æ—Ç—á–∏–∫–∏ —Å–æ–±—ã—Ç–∏–π', () => {
        const button = document.getElementById('basic-btn');
        if (!button) throw new Error('–≠–ª–µ–º–µ–Ω—Ç basic-btn –Ω–µ –Ω–∞–π–¥–µ–Ω');
        
        const event = new MouseEvent('click', {
            clientX: 100,
            clientY: 100,
            bubbles: true
        });
        
        button.dispatchEvent(event);
        
        const output = document.getElementById('basic-output');
        if (!output || !output.textContent) {
            throw new Error('–ò–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è –æ —Å–æ–±—ã—Ç–∏–∏ –Ω–µ –æ—Ç–æ–±—Ä–∞–∂–∞–µ—Ç—Å—è');
        }
        return true;
    });
    
    // –¢–µ—Å—Ç 2: –°–æ–±—ã—Ç–∏—è –º—ã—à–∏
    test('–°–æ–±—ã—Ç–∏—è –º—ã—à–∏', () => {
        const colorBox = document.getElementById('color-box');
        if (!colorBox) throw new Error('–≠–ª–µ–º–µ–Ω—Ç color-box –Ω–µ –Ω–∞–π–¥–µ–Ω');
        
        const enterEvent = new MouseEvent('mouseenter', {
            bubbles: true
        });
        
        colorBox.dispatchEvent(enterEvent);
        
        // –î–∞–µ–º –≤—Ä–µ–º—è –Ω–∞ –æ–±—Ä–∞–±–æ—Ç–∫—É
        return new Promise(resolve => {
            setTimeout(() => {
                const bgColor = colorBox.style.backgroundColor;
                if (!bgColor) {
                    throw new Error('–¶–≤–µ—Ç —Ñ–æ–Ω–∞ –Ω–µ –∏–∑–º–µ–Ω–∏–ª—Å—è –ø—Ä–∏ mouseenter');
                }
                resolve(true);
            }, 100);
        });
    });
    
    // –¢–µ—Å—Ç 3: –î–µ–ª–µ–≥–∏—Ä–æ–≤–∞–Ω–∏–µ —Å–æ–±—ã—Ç–∏–π
    test('–î–µ–ª–µ–≥–∏—Ä–æ–≤–∞–Ω–∏–µ —Å–æ–±—ã—Ç–∏–π', () => {
        const initialItems = document.querySelectorAll('.item').length;
        
        // –î–æ–±–∞–≤–ª—è–µ–º –Ω–æ–≤—ã–π —ç–ª–µ–º–µ–Ω—Ç
        addNewItem();
        
        return new Promise(resolve => {
            setTimeout(() => {
                const newItems = document.querySelectorAll('.item').length;
                if (newItems !== initialItems + 1) {
                    throw new Error('–ù–æ–≤—ã–π —ç–ª–µ–º–µ–Ω—Ç –Ω–µ –¥–æ–±–∞–≤–ª–µ–Ω');
                }
                resolve(true);
            }, 100);
        });
    });
    
    // –¢–µ—Å—Ç 4: –ü—Ä–µ–¥–æ—Ç–≤—Ä–∞—â–µ–Ω–∏–µ –ø–æ–≤–µ–¥–µ–Ω–∏—è
    test('–ü—Ä–µ–¥–æ—Ç–≤—Ä–∞—â–µ–Ω–∏–µ –ø–æ–≤–µ–¥–µ–Ω–∏—è', () => {
        const link = document.getElementById('prevent-link');
        if (!link) throw new Error('–≠–ª–µ–º–µ–Ω—Ç prevent-link –Ω–µ –Ω–∞–π–¥–µ–Ω');
        
        const clickEvent = new MouseEvent('click', { 
            bubbles: true,
            cancelable: true
        });
        
        let defaultPrevented = false;
        const handler = (e) => {
            if (e.defaultPrevented) {
                defaultPrevented = true;
            }
        };
        
        link.addEventListener('click', handler);
        link.dispatchEvent(clickEvent);
        link.removeEventListener('click', handler);
        
        if (!defaultPrevented) {
            throw new Error('–°—Ç–∞–Ω–¥–∞—Ä—Ç–Ω–æ–µ –ø–æ–≤–µ–¥–µ–Ω–∏–µ –Ω–µ –ø—Ä–µ–¥–æ—Ç–≤—Ä–∞—â–µ–Ω–æ');
        }
        return true;
    });
    
    // –¢–µ—Å—Ç 5: –ö–∞—Å—Ç–æ–º–Ω—ã–µ —Å–æ–±—ã—Ç–∏—è
    test('–ö–∞—Å—Ç–æ–º–Ω—ã–µ —Å–æ–±—ã—Ç–∏—è', () => {
        let eventHandled = false;
        
        const handler = () => { eventHandled = true; };
        document.addEventListener('testEvent', handler);
        
        const testEvent = new CustomEvent('testEvent', {
            bubbles: true
        });
        document.dispatchEvent(testEvent);
        
        document.removeEventListener('testEvent', handler);
        
        if (!eventHandled) {
            throw new Error('–ö–∞—Å—Ç–æ–º–Ω–æ–µ —Å–æ–±—ã—Ç–∏–µ –Ω–µ –æ–±—Ä–∞–±–æ—Ç–∞–Ω–æ');
        }
        return true;
    });
    
    // –¢–µ—Å—Ç 6: Debounce —Ñ—É–Ω–∫—Ü–∏—è
    test('Debounce —Ñ—É–Ω–∫—Ü–∏—è', () => {
        return new Promise((resolve) => {
            let callCount = 0;
            const testFunc = () => callCount++;
            const debounced = createDebounce(testFunc, 100);
            
            // –ë—ã—Å—Ç—Ä—ã–µ –≤—ã–∑–æ–≤—ã
            debounced();
            debounced();
            debounced();
            
            setTimeout(() => {
                if (callCount !== 1) {
                    throw new Error('Debounce –Ω–µ —Ä–∞–±–æ—Ç–∞–µ—Ç –ø—Ä–∞–≤–∏–ª—å–Ω–æ');
                }
                resolve(true);
            }, 200);
        });
    });
    
    // –¢–µ—Å—Ç 7: Throttle —Ñ—É–Ω–∫—Ü–∏—è
    test('Throttle —Ñ—É–Ω–∫—Ü–∏—è', () => {
        return new Promise((resolve) => {
            let callCount = 0;
            const testFunc = () => callCount++;
            const throttled = createThrottle(testFunc, 100);
            
            // –ë—ã—Å—Ç—Ä—ã–µ –≤—ã–∑–æ–≤—ã
            throttled();
            throttled();
            throttled();
            
            setTimeout(() => {
                if (callCount > 1) {
                    throw new Error('Throttle –Ω–µ —Ä–∞–±–æ—Ç–∞–µ—Ç –ø—Ä–∞–≤–∏–ª—å–Ω–æ');
                }
                resolve(true);
            }, 50);
        });
    });
    
    // –¢–µ—Å—Ç 8: –¢–∞–π–º–µ—Ä
    test('–¢–∞–π–º–µ—Ä', () => {
        return new Promise((resolve) => {
            startTimer();
            
            setTimeout(() => {
                if (timerValue === 0) {
                    throw new Error('–¢–∞–π–º–µ—Ä –Ω–µ –∑–∞–ø—É—Å—Ç–∏–ª—Å—è');
                }
                stopTimer();
                resolve(true);
            }, 1100);
        });
    });
    
    // –¢–µ—Å—Ç 9: –í–∞–ª–∏–¥–∞—Ü–∏—è —Ñ–æ—Ä–º—ã
    test('–í–∞–ª–∏–¥–∞—Ü–∏—è —Ñ–æ—Ä–º—ã', () => {
        const form = document.getElementById('prevent-form');
        if (!form) throw new Error('–§–æ—Ä–º–∞ prevent-form –Ω–µ –Ω–∞–π–¥–µ–Ω–∞');
        
        const submitEvent = new Event('submit', { 
            bubbles: true,
            cancelable: true
        });
        
        let prevented = false;
        const handler = (e) => {
            if (e.defaultPrevented) {
                prevented = true;
            }
        };
        
        form.addEventListener('submit', handler);
        form.dispatchEvent(submitEvent);
        form.removeEventListener('submit', handler);
        
        if (!prevented) {
            throw new Error('–û—Ç–ø—Ä–∞–≤–∫–∞ —Ñ–æ—Ä–º—ã –Ω–µ –ø—Ä–µ–¥–æ—Ç–≤—Ä–∞—â–µ–Ω–∞');
        }
        return true;
    });
    
    // –¢–µ—Å—Ç 10: –û–±—Ä–∞–±–æ—Ç–∫–∞ –∫–ª–∞–≤–∏–∞—Ç—É—Ä—ã
    test('–û–±—Ä–∞–±–æ—Ç–∫–∞ –∫–ª–∞–≤–∏–∞—Ç—É—Ä—ã', () => {
        const input = document.getElementById('key-input');
        if (!input) throw new Error('–≠–ª–µ–º–µ–Ω—Ç key-input –Ω–µ –Ω–∞–π–¥–µ–Ω');
        
        const keyEvent = new KeyboardEvent('keydown', {
            key: 's',
            ctrlKey: true,
            bubbles: true,
            cancelable: true
        });
        
        let prevented = false;
        const handler = (e) => {
            if (e.defaultPrevented) {
                prevented = true;
            }
        };
        
        input.addEventListener('keydown', handler);
        input.dispatchEvent(keyEvent);
        input.removeEventListener('keydown', handler);
        
        if (!prevented) {
            throw new Error('–ö–æ–º–±–∏–Ω–∞—Ü–∏—è Ctrl+S –Ω–µ –ø—Ä–µ–¥–æ—Ç–≤—Ä–∞—â–µ–Ω–∞');
        }
        return true;
    });
    
    // –ó–∞–≤–µ—Ä—à–µ–Ω–∏–µ —Ç–µ—Å—Ç–æ–≤
    setTimeout(() => {
        console.log(`\nüìä –†–µ–∑—É–ª—å—Ç–∞—Ç—ã —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏—è:`);
        console.log(`‚úÖ –ü—Ä–æ–π–¥–µ–Ω–æ: ${testsPassed} –∏–∑ ${totalTests}`);
        console.log(`üìà –£—Å–ø–µ—à–Ω–æ—Å—Ç—å: ${Math.round((testsPassed / totalTests) * 100)}%`);
        
        if (testsPassed === totalTests) {
            console.log('üéâ –í—Å–µ —Ç–µ—Å—Ç—ã –ø—Ä–æ–π–¥–µ–Ω—ã —É—Å–ø–µ—à–Ω–æ!');
        } else {
            console.log('üí° –ù–µ–∫–æ—Ç–æ—Ä—ã–µ —Ç–µ—Å—Ç—ã –Ω–µ –ø—Ä–æ–π–¥–µ–Ω—ã. –ü—Ä–æ–≤–µ—Ä—å—Ç–µ —Ä–µ–∞–ª–∏–∑–∞—Ü–∏—é —Ñ—É–Ω–∫—Ü–∏–π.');
        }
    }, 2000);
}

// –î–æ–±–∞–≤–ª—è–µ–º –∫–Ω–æ–ø–∫—É –¥–ª—è –∑–∞–ø—É—Å–∫–∞ —Ç–µ—Å—Ç–æ–≤ –≤—Ä—É—á–Ω—É—é
function addTestButton() {
    const testButton = document.createElement('button');
    testButton.textContent = 'üöÄ –ó–∞–ø—É—Å—Ç–∏—Ç—å —Ç–µ—Å—Ç—ã';
    testButton.style.cssText = `
        position: fixed;
        top: 20px;
        right: 20px;
        background: #ff6b6b;
        color: white;
        border: none;
        padding: 10px 15px;
        border-radius: 5px;
        cursor: pointer;
        z-index: 1000;
        font-size: 14px;
    `;
    testButton.onclick = runEventTests;
    
    document.body.appendChild(testButton);
}

// –ó–∞–ø—É—Å–∫–∞–µ–º —Ç–æ–ª—å–∫–æ –¥–æ–±–∞–≤–ª–µ–Ω–∏–µ –∫–Ω–æ–ø–∫–∏, –±–µ–∑ –∞–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∏—Ö —Ç–µ—Å—Ç–æ–≤
document.addEventListener('DOMContentLoaded', function() {
    addTestButton();
    console.log('‚úÖ –ü—Ä–∏–ª–æ–∂–µ–Ω–∏–µ –∑–∞–≥—Ä—É–∂–µ–Ω–æ. –î–ª—è –∑–∞–ø—É—Å–∫–∞ —Ç–µ—Å—Ç–æ–≤ –Ω–∞–∂–º–∏—Ç–µ –∫–Ω–æ–ø–∫—É "üöÄ –ó–∞–ø—É—Å—Ç–∏—Ç—å —Ç–µ—Å—Ç—ã"');
});