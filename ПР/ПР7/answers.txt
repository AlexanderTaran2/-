1. Какие HTML5-атрибуты используются для клиентской валидации и какую функциональность они предоставляют?
- `required` - указывает, что поле обязательно для заполнения
- `type` - определяет тип данных (email, tel, number и т.д.) и соответствующую валидацию
- `pattern` - позволяет задать регулярное выражение для проверки формата ввода
- `minlength`/`maxlength` - задают минимальную и максимальную длину значения
- `min`/`max` - задают минимальное и максимальное значение для числовых полей
- `step` - определяет шаг изменения для числовых полей
2. В чем разница между `novalidate` атрибутом формы и отключением валидации через JavaScript?
- `novalidate` - это атрибут HTML, который полностью отключает встроенную браузерную валидацию, но позволяет реализовать собственную с помощью JavaScript
- Отключение валидации через JavaScript дает более гибкий контроль - можно отключать/включать валидацию динамически, для отдельных полей или при определенных условиях
3. Как правильно связать `<label>` с полем ввода и почему это важно для доступности?
Связать можно двумя способами:
1. Поместить поле ввода внутрь элемента `<label>`
2. Использовать атрибут `for` у `<label>`, который соответствует `id` поля ввода
Это важно для:
- Улучшения доступности для скринридеров
- Увеличения области клика (можно кликнуть на текст label для активации поля)
- Улучшения семантики HTML
4. Какие типы полей `input` наиболее подходят для разных видов данных?
- `email` - для адресов электронной почты
- `tel` - для телефонных номеров
- `password` - для паролей (скрывает ввод)
- `date` - для выбора даты
- `number` - для числовых значений
- `url` - для веб-адресов
- `search` - для поисковых запросов
5. Как работает валидация с помощью `pattern` атрибута и в каких случаях его следует использовать?
Атрибут `pattern` содержит регулярное выражение, которому должно соответствовать значение поля. Использовать следует:
- Когда нужна проверка сложного формата данных
- Для проверки специальных форматов (коды, идентификаторы)
- Когда стандартных типов полей недостаточно
6. Какие события JavaScript используются для реализации валидации в реальном времени и почему?
- `input` - срабатывает при каждом изменении значения
- `change` - срабатывает при потере фокуса, если значение изменилось
- `blur` - срабатывает при потере фокуса полем
- `focus` - срабатывает при получении фокуса
Эти события позволяют валидировать данные по мере ввода, обеспечивая мгновенную обратную связь.
7. Как обеспечить доступность сообщений об ошибках для пользователей скринридеров?
- Использовать `aria-live` для контейнеров с сообщениями об ошибках
- Связывать поля с сообщениями об ошибках через `aria-describedby`
- Использовать `aria-invalid` для указания невалидного состояния
- Обеспечивать логический порядок табуляции
8. В чем преимущества использования `fieldset` и `legend` для группировки полей формы?
- Улучшение семантики и доступности
- Логическая группировка связанных полей
- Упрощение навигации для пользователей скринридеров
- Улучшение визуальной организации формы
9. Как реализовать кастомную валидацию для сложных случаев (например, подтверждение пароля)?
1. Отключить встроенную валидацию с помощью `novalidate`
2. Реализовать собственные функции валидации в JavaScript
3. Использовать события для запуска валидации
4. Показывать кастомные сообщения об ошибках
5. Проверять взаимосвязи между полями (например, совпадение паролей)
10. Какие методы CSS используются для визуального отображения состояний валидности/невалидности полей?
- Псевдоклассы `:valid` и `:invalid`
- Псевдоклассы `:focus` для выделения активного поля
- Кастомные классы, добавляемые через JavaScript
- Изменение цвета границы, фона, добавление иконок
- Анимации для плавного перехода между состояниями