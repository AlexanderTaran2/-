Ответы на вопросы для самоконтроля:
1. Разница между Function Declaration и Function Expression в контексте hoisting
**Function Declaration** поднимается (hoisted) полностью - можно вызывать до объявления.  
**Function Expression** - поднимается только переменная, но не присвоение. Вызов до объявления вызовет ошибку.
2. Rest parameters vs arguments object
**Rest parameters** - современный синтаксис, настоящий массив, можно использовать методы массива.  
**arguments** - устаревший объект, не массив, требует преобразования.
3. Замыкание и лексическая область видимости
**Замыкание** - функция + её лексическое окружение. Функция "запоминает" переменные из внешней области даже после её выполнения.  
**Лексическая область** - определение области видимости на этапе написания кода.
4. Рекурсия vs итерация
**Рекурсия** - элегантно для древовидных структур, но риск переполнения стека.  
**Итерация** - эффективнее по памяти, лучше для простых циклов.
5. Функции высшего порядка
Функции, принимающие/возвращающие другие функции.  
**Встроенные методы:** map, filter, reduce, forEach, sort.
6. Каррирование и преимущества
Преобразование функции от многих аргументов в цепочку функций от одного аргумента.  
**Преимущества:** переиспользование, частичное применение, композиция.
7. Мемоизация и эффективность
Кэширование результатов вызовов функции.  
**Эффективна для:** тяжелых вычислений, чистых функций, повторяющихся вызовов.
8. Debounce vs Throttle
**Debounce** - откладывает вызов до паузы в событиях (поиск).  
**Throttle** - ограничивает частоту вызовов (скролл, ресайз).
9. Функции-генераторы
**Отличия:** function*, yield, возвращают итератор, могут приостанавливать выполнение.  
**Использование:** ленивые вычисления, асинхронные операции.
10. Принципы функционального программирования
**Примененные:** чистые функции, неизменяемость, функции высшего порядка, композиция.  
**Benefits:** предсказуемость, тестируемость, переиспользование, меньше багов.