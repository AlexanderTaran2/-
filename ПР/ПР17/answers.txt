# Ответы на вопросы для самоконтроля
1. В чем разница между управляемыми и неуправляемыми компонентами в формах React?
**Управляемые компоненты:**
- Значения полей управляются состоянием React
- Изменения обрабатываются через обработчики событий (onChange)
- React является "источником истины" для данных формы
**Неуправляемые компоненты:**
- Значения полей управляются DOM
- Данные получаются через refs при отправке формы
- DOM является "источником истины" для данных формы
2. Когда следует использовать управляемые компоненты, а когда - неуправляемые?
**Управляемые компоненты следует использовать когда:**
- Нужна валидация в реальном времени
- Требуется мгновенная реакция на изменения
- Нужно управлять состоянием формы программно
- Требуется сложная логика обработки данных
Неуправляемые компоненты подходят когда:**
- Форма простая и не требует валидации
- Нужно интегрировать с не-React кодом
- Производительность критична (меньше ререндеров)
- Данные нужны только при отправке формы
3. Какие методы используются для обработки событий в формах React?
- `onChange` - при изменении значения поля
- `onSubmit` - при отправке формы
- `onBlur` - при потере фокуса полем
- `onFocus` - при получении фокуса полем
- `onClick` - при клике на элементы формы
4. Как обрабатывать несколько полей ввода с одним обработчиком?
Использовать атрибут `name` у полей ввода и один обработчик:
const handleChange = (e) => {
  const { name, value } = e.target;
  setFormData(prev => ({
    ...prev,
    [name]: value
  }));
};
<input name="email" onChange={handleChange} />
<input name="password" onChange={handleChange} />
5. Какие подходы к валидации форм в React вы знаете?
Валидация при отправке - проверка всех полей при submit
Валидация при изменении - проверка при onChange
Валидация при потере фокуса - проверка при onBlur
Сторонние библиотеки - Formik, React Hook Form, Yup
HTML5 валидация - required, pattern, minLength и т.д.
6. Как предотвратить стандартное поведение формы (перезагрузку страницы)?
Вызвать e.preventDefault() в обработчике onSubmit:
const handleSubmit = (e) => {
  e.preventDefault();
  // обработка данных формы
};
7. Что такое "поднятие состояния" (lifting state up) в контексте форм?
Это перенос состояния из дочерних компонентов формы в родительский компонент для:
Централизованного управления состоянием формы
Общего доступа к данным формы из разных компонентов
Синхронизации данных между компонентами формы